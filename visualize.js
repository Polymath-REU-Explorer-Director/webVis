// Generated by CoffeeScript 1.12.8
var container, data, ed, edges, edits, graph, graph_data, handleClick, init, moveToken, network, nodeSelected, nodes, options, setToken;

graph_data = {};

graph_data["1"] = ["2", "3"];

graph_data["2"] = ["1", "4", "a"];

graph_data["3"] = ["1"];

graph_data["4"] = ["2"];

graph_data["a"] = ["2"];

graph = new Graph(graph_data, 1);

ed = new ExplorerDirector(graph, {});

nodes = new vis.DataSet([
  {
    id: "1",
    label: '',
    color: {
      background: "limegreen",
      border: "black"
    }
  }, {
    id: "2",
    label: '',
    color: {
      background: "white",
      border: "black"
    }
  }, {
    id: "3",
    label: '',
    color: {
      background: "white",
      border: "black"
    }
  }, {
    id: "4",
    label: '',
    color: {
      background: "white",
      border: "black"
    }
  }, {
    id: "a",
    label: '',
    color: {
      background: "white",
      border: "black"
    }
  }
]);

edges = new vis.DataSet([
  {
    id: "1-3",
    from: "1",
    to: "3"
  }, {
    id: "1-2",
    from: "1",
    to: "2"
  }, {
    id: "2-4",
    from: "2",
    to: "4"
  }, {
    id: "2-a",
    from: "2",
    to: "a"
  }
]);

container = document.getElementById('mynetwork');

data = {
  nodes: nodes,
  edges: edges
};

edits = false;

options = {
  edges: {
    color: "black",
    width: 3,
    chosen: false
  },
  nodes: {
    borderWidth: 5,
    borderWidthSelected: 1,
    chosen: false,
    font: {
      'face': 'Monospace',
      align: 'middle'
    }
  },
  manipulation: {
    addNode: (function(data, callback) {
      data.label = "";
      callback(data);
      ed.updateGraph();
      ed.defaultBorderColor();
      return ed.recolorUnvisitedNodes();
    }),
    editNode: (function(data, callback) {
      callback(data);
      ed.updateGraph();
      ed.defaultBorderColor();
      return ed.recolorUnvisitedNodes();
    }),
    addEdge: (function(data, callback) {
      if (data.from !== data.to) {
        callback(data);
        return ed.updateGraph();
      }
    })
  },
  interaction: {
    hover: true,
    zoomView: false,
    navigationButtons: true
  }
};

network = new vis.Network(container, data, options);

network.on('click', function(properties) {
  var clickedNodes, ids;
  ids = properties.nodes;
  clickedNodes = nodes.get(ids);
  return handleClick(clickedNodes[0]);
});

network.on("hoverNode", function(params) {
  return network.canvas.body.container.style.cursor = 'pointer';
});

network.on("hoverEdge", function(params) {
  return network.canvas.body.container.style.cursor = 'pointer';
});

network.on("blurNode", function(params) {
  return network.canvas.body.container.style.cursor = 'default';
});

network.on("blurEdge", function(params) {
  return network.canvas.body.container.style.cursor = 'default';
});

init = function() {
  setDefaultLocale();
  return draw();
};

ed.network = network;

ed.updateGraph();

network.on('click', function(properties) {
  var clickedNodes, ids;
  ed.updateGraph();
  ed.defaultBorderColor();
  ed.recolorUnvisitedNodes();
  ids = properties.nodes;
  clickedNodes = nodes.get(ids);
  return handleClick(clickedNodes[0]);
});

nodeSelected = void 0;

moveToken = false;

handleClick = function(clickedNode) {
  if (nodeSelected === void 0 || clickedNode === void 0) {
    return nodeSelected = clickedNode;
  } else if (clickedNode.id === nodeSelected.id) {
    console.log("Double click: v" + nodeSelected.id);
    if (moveToken) {
      return setToken(nodeSelected.id, true);
    }
  } else {
    return nodeSelected = clickedNode;
  }
};

setToken = function(dest, inGame) {
  if (inGame == null) {
    inGame = false;
  }
  if (dest == null) {
    document.getElementById("selectNode").innerHTML = "Click a node to move the token";
    return moveToken = true;
  } else {
    document.getElementById("selectNode").innerHTML = "";
    moveToken = false;
    return ed.moveToken(dest, inGame);
  }
};
