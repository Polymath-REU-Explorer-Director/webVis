// Generated by CoffeeScript 1.12.8
var Graph,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

Graph = (function() {
  function Graph(adjList) {
    this.adjList = adjList != null ? adjList : {};
    this.distMatrix = {};
    this.floydWarshall();
  }

  Graph.prototype.clear = function() {
    return this.adjList = {};
  };

  Graph.prototype.vertices = function() {
    var key, results;
    results = [];
    for (key in this.adjList) {
      results.push(key);
    }
    return results;
  };

  Graph.prototype.isEdge = function(v1, v2) {
    return (indexOf.call(this.adjList[v1], v2) >= 0);
  };

  Graph.prototype.addVertex = function(vertex) {
    if (this.adjList[vertex] == null) {
      this.adjList[vertex] = [];
      return this.floydWarshall();
    }
  };

  Graph.prototype.addEdge = function(v1, v2) {
    if ((v1 !== v2) && (this.adjList[v1] != null) && (this.adjList[v2] != null)) {
      if (indexOf.call(this.adjList[v1], v2) < 0) {
        this.adjList[v1].push(v2);
      }
      if (indexOf.call(this.adjList[v2], v1) < 0) {
        this.adjList[v2].push(v1);
      }
      return this.floydWarshall();
    }
  };

  Graph.prototype.removeEdge = function(v1, v2) {
    var index1, index2;
    index1 = this.adjList[v1].indexOf(v2);
    if (index1 !== -1) {
      this.adjList[v1].splice(index1, 1);
    }
    index2 = this.adjList[v2].indexOf(v1);
    if (index !== -1) {
      this.adjList[v2].splice(index2, 1);
    }
    if (index1 !== -1 || index2 !== -1) {
      return this.floydWarshall();
    }
  };

  Graph.prototype.removeVertex = function(vertex) {
    var index, v;
    this.adjList[vertex] = void 0;
    delete this.adjList[vertex];
    for (v in this.adjList) {
      index = this.adjList[v].indexOf(vertex);
      if (index !== -1) {
        console.log(v);
        this.adjList[v].splice(index, 1);
      }
    }
    return this.floydWarshall();
  };

  Graph.prototype.floydWarshall = function() {
    var base, v1, v2, v3;
    this.distMatrix = {};
    for (v1 in this.adjList) {
      if ((base = this.distMatrix)[v1] == null) {
        base[v1] = {};
      }
      for (v2 in this.adjList) {
        if (v1 === v2) {
          this.distMatrix[v1][v2] = 0;
        } else if (this.adjList[v1].indexOf(v2) !== -1) {
          this.distMatrix[v1][v2] = 1;
        } else {
          this.distMatrix[v1][v2] = 2e308;
        }
      }
    }
    for (v1 in this.adjList) {
      for (v2 in this.adjList) {
        for (v3 in this.adjList) {
          if (this.distMatrix[v2][v3] > this.distMatrix[v2][v1] + this.distMatrix[v1][v3]) {
            this.distMatrix[v2][v3] = this.distMatrix[v2][v1] + this.distMatrix[v1][v3];
          }
        }
      }
    }
    return null;
  };

  Graph.prototype.distances = function(start) {
    var Q, alt, cIndex, dist, i, index, j, len, len1, prev, ref, u, vertex;
    dist = {};
    prev = {};
    Q = [];
    for (vertex in this.adjList) {
      dist[vertex] = 2e308;
      Q.push(vertex);
    }
    dist[start] = 0;
    while (Q.length > 0) {
      cIndex = 0;
      for (i = 0, len = Q.length; i < len; i++) {
        index = Q[i];
        if (dist[Q[index]] < dist[Q[cIndex]]) {
          cIndex = index;
        }
      }
      u = Q[cIndex];
      Q.splice(cIndex, 1);
      ref = this.adjList[u];
      for (j = 0, len1 = ref.length; j < len1; j++) {
        vertex = ref[j];
        if (true) {
          alt = dist[u] + 1;
          if (alt < dist[vertex]) {
            dist[vertex] = alt;
          }
        }
      }
    }
    return dist;
  };

  return Graph;

})();
